--- proofs_111_original.dfy	2024-10-11 08:52:49
+++ proofs/proofs.dfy	2024-10-11 08:52:58
@@ -1970,6 +1970,23 @@
       }
     }
 
+    module strict {
+      import Old
+      import New
+      import opened types
+      function StrictTypeError_to_TypeError(x: Old.validation.strict.StrictTypeError): New.validation.types.TypeError
+      {
+        match x {
+          case TypeError(t) => TypeError_forward(t)
+          case _ => assume false; New.validation.types.EmptyLUB()
+        }
+      }
+      function Result_forward<T_O, T_N>(T_forward: T_O->T_N, T_backward: T_N->T_O, R_O: Old.validation.strict.Result<T_O>): New.validation.types.Result<T_N>
+      {
+        R_O.MapErr(StrictTypeError_to_TypeError).Map(T_forward)
+      }
+    }
+
     module validator {
       import Joint
 
@@ -1989,6 +2006,8 @@
 
       import opened util
 
+      import strict
+
       function Schema_forward(S_O: Old.validation.validator.Schema): New.validation.validator.Schema
       {
         match S_O {
@@ -2094,6 +2113,22 @@
             /* unchanged constructor */ Old.validation.validator.ValidationError.AllFalse()
           case TypeError(x0_N) =>
             /* deleted constructor */ Translations.Utils.???()
+        }
+      }
+
+      function ValidationMode_forward(V_O: Old.validation.validator.ValidationMode): New.validation.types.ValidationMode
+      {
+        match V_O {
+          case Permissive() => New.validation.types.Permissive()
+          case Strict() => New.validation.types.Strict()
+        }
+      }
+
+      function ValidationMode_backward(V_N: New.validation.types.ValidationMode): Old.validation.validator.ValidationMode
+      {
+        match V_N {
+          case Permissive() => Old.validation.validator.Permissive()
+          case Strict() => Old.validation.validator.Strict()
         }
       }
 
@@ -2113,6 +2148,11 @@
         }
       }
 
+      function TypeError_back_to_StrictTypeError(x: New.validation.types.TypeError): Old.validation.strict.StrictTypeError
+      {
+        Old.validation.strict.TypeError(TypeError_backward(x))
+      }
+
       lemma Validator_Typecheck_bc(V_O: Old.validation.validator.Validator, V_N: New.validation.validator.Validator, e_O: Joint.def.core.Expr, ets_O: Old.validation.typechecker.EntityTypeStore, acts_O: Old.validation.typechecker.ActionStore, reqty_O: Old.validation.typechecker.RequestType, e_N: Joint.def.core.Expr, ets_N: New.validation.typechecker.EntityTypeStore, acts_N: New.validation.typechecker.ActionStore, reqty_N: New.validation.typechecker.RequestType)
         decreases V_O, e_O, ets_O, acts_O, reqty_O
         requires V_N == Validator_forward(V_O)
@@ -2689,6 +2729,8 @@
         {
           var typechecker := Old.validation.strict.StrictTypechecker.StrictTypechecker(schema_O.ets, schema_O.acts, schema_O.reqty); assert New.validation.thm.toplevel.strictTypecheck(pid_N, policies_N, schema_N) == strict.Result_forward((x: Old.validation.types.Type) => Type_forward(x), (x: New.validation.types.Type) => Type_backward(x), typechecker.typecheck(policies_O.policies[pid_O].toExpr(), Old.validation.types.Type.Bool(Old.validation.types.BoolType.AnyBool())));
         }
+
+        import strict
 
         import opened typechecker
 
